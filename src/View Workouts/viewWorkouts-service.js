const viewWorkoutsService = {
    getAllWorkouts(knex, firstDay, lastDay) {
        return knex
        .select(
            'body.id',
            'body.date',
            'body.body_part',
            'workout.exercise',
            'workout.sets',  
            'workout.reps',
            'workout.weight',
        )
        .from('body')
        // .whereRaw('??::date = ?', ['date', date])
        .where('date', '>=', `'${firstDay}'`)
        .where('date', '<=', `'${lastDay}'`)
        .leftJoin('workout', 'body.id', 'workout.body_part_id')
    },

    // id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    // exercise TEXT NOT NULL,
    // sets INTEGER NOT NULL,
    // reps INTEGER NOT NULL,
    // weight INTEGER NOT NULL,
    // body_part_id INTEGER REFERENCES body(id) ON DELETE CASCADE NOT NULL

    // SELECT 
    //     d.id, 
    //     d.dept_name, 
    //     e.emp_name, 
    //     e.phone, 
    //     e.title, 
    //     e.salary 
    // FROM 
    // department d 
    // JOIN 
    // employee e 
    // ON d.manager = e.id;

    insertBodyParts(knex, newBodyParts) {
        return knex
            .insert(newBodyParts)
            .into("body")
            .returning("*")
            .then(rows => {
                console.log(rows[0]);
                return rows[0];
            })
    }
}

module.exports = viewWorkoutsService;